input:
    input.go: |
        package slices_arrays

        // goverter:converter
        type Converter interface {
           ConvertHouse(source DBHouseNames) APIHouseNames
        }

        type DBHouseNames struct {
           Names ***[]string
        }

        type APIHouseNames struct {
           Names ***[]string
        }
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) ConvertHouse(source execution.DBHouseNames) execution.APIHouseNames {
    	var slices_arraysAPIHouseNames execution.APIHouseNames
    	var pPPStringList ***[]string
    	if source.Names != nil {
    		var pPStringList **[]string
    		if *source.Names != nil {
    			var pStringList *[]string
    			if **source.Names != nil {
    				stringListSourceDeref := ***source.Names
    				stringList := make([]string, len(stringListSourceDeref))
    				for i := 0; i < len(stringListSourceDeref); i++ {
    					stringList[i] = stringListSourceDeref[i]
    				}
    				pStringList = &stringList
    			}
    			pPStringList = &pStringList
    		}
    		pPPStringList = &pPStringList
    	}
    	slices_arraysAPIHouseNames.Names = pPPStringList
    	return slices_arraysAPIHouseNames
    }
