input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:mapIdentity Base
            Convert(in *In) *Out
        }

        type In struct {
            Name string
            Age  int
        }

        type Out struct {
            Base
            Age int
        }

        type Base struct {
            Name string
        }
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source *execution.In) *execution.Out {
    	var pStructsOut *execution.Out
    	if source != nil {
    		structsOut := c.structsInToStructsOut((*source))
    		pStructsOut = &structsOut
    	}
    	return pStructsOut
    }
    func (c *ConverterImpl) structsInToStructsBase(source execution.In) execution.Base {
    	var structsBase execution.Base
    	structsBase.Name = source.Name
    	return structsBase
    }
    func (c *ConverterImpl) structsInToStructsOut(source execution.In) execution.Out {
    	var structsOut execution.Out
    	structsOut.Base = c.structsInToStructsBase(source)
    	structsOut.Age = source.Age
    	return structsOut
    }
