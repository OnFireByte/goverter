input:
    input.go: |
        package structs

        type Enum1 int
        type Enum2 string

        // goverter:converter
        // goverter:extend ZeroConvert EmptyConverter EnumConverter
        type Converter interface {
            Convert(source Input) (Output, error)
        }

        func ZeroConvert(*int) int {
            return 0
        }
        func EmptyConverter(*string) (string, error) {
            return "", nil
        }
        func EnumConverter(Enum1) (Enum2, error) {
            return "", nil
        }

        type Input struct {
            Name *string
            Age *int
            Enum Enum1
        }
        type Output struct {
            Name string
            Age int
            Enum Enum2
        }
wrapErrors: true
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import (
    	"fmt"
    	execution "github.com/jmattheis/goverter/execution"
    )

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source execution.Input) (execution.Output, error) {
    	var structsOutput execution.Output
    	xstring, err := execution.EmptyConverter(source.Name)
    	if err != nil {
    		var errValue execution.Output
    		return errValue, fmt.Errorf("error setting field %q: %w", "Name", err)
    	}
    	structsOutput.Name = xstring
    	structsOutput.Age = execution.ZeroConvert(source.Age)
    	structsEnum2, err := execution.EnumConverter(source.Enum)
    	if err != nil {
    		var errValue2 execution.Output
    		return errValue2, fmt.Errorf("error setting field %q: %w", "Enum", err)
    	}
    	structsOutput.Enum = structsEnum2
    	return structsOutput, nil
    }
