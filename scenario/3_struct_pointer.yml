input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            Convert(source Input) Output
        }

        type X struct {
            Y *Y
        }
        type Y struct {
            Z *Z
        }
        type Z struct {
            Z string
        }

        type Input struct {
            Age **X
        }
        type Output struct {
            Age **X
        }

        type ID string
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
    	var structsOutput execution.Output
    	var pPStructsX **execution.X
    	if source.Age != nil {
    		var pStructsX *execution.X
    		if (*source.Age) != nil {
    			structsX := c.structsXToStructsX((*(*source.Age)))
    			pStructsX = &structsX
    		}
    		pPStructsX = &pStructsX
    	}
    	structsOutput.Age = pPStructsX
    	return structsOutput
    }
    func (c *ConverterImpl) structsXToStructsX(source execution.X) execution.X {
    	var structsX execution.X
    	var pStructsY *execution.Y
    	if source.Y != nil {
    		structsY := c.structsYToStructsY((*source.Y))
    		pStructsY = &structsY
    	}
    	structsX.Y = pStructsY
    	return structsX
    }
    func (c *ConverterImpl) structsYToStructsY(source execution.Y) execution.Y {
    	var structsY execution.Y
    	var pStructsZ *execution.Z
    	if source.Z != nil {
    		structsZ := c.structsZToStructsZ((*source.Z))
    		pStructsZ = &structsZ
    	}
    	structsY.Z = pStructsZ
    	return structsY
    }
    func (c *ConverterImpl) structsZToStructsZ(source execution.Z) execution.Z {
    	var structsZ execution.Z
    	structsZ.Z = source.Z
    	return structsZ
    }
