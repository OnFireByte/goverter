input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            ConvertHouse(source Input) Output
        }

        type Input struct {
            House [][]struct {
                Names []string
            }
        }

        type Output struct {
            House [][]struct {
                Names []string
            }
        }
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) ConvertHouse(source execution.Input) execution.Output {
    	var structsOutput execution.Output
    	unnamedListList := make([][]struct {
    		Names []string
    	}, len(source.House))
    	for i := 0; i < len(source.House); i++ {
    		unnamedList := make([]struct {
    			Names []string
    		}, len(source.House[i]))
    		for j := 0; j < len(source.House[i]); j++ {
    			var unnamed struct {
    				Names []string
    			}
    			stringList := make([]string, len(source.House[i][j].Names))
    			for k := 0; k < len(source.House[i][j].Names); k++ {
    				stringList[k] = source.House[i][j].Names[k]
    			}
    			unnamed.Names = stringList
    			unnamedList[j] = unnamed
    		}
    		unnamedListList[i] = unnamedList
    	}
    	structsOutput.House = unnamedListList
    	return structsOutput
    }
